https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes

Commit a single file
git add .
git commit -m "Add existing file"
git push origin master

git clone https://github.com/carpedm20/DCGAN-tensorflow.git
git checkout -b mybranch
git commit -A (update all modified files)
git commit -m "comment"
git push ( upload to server)
git reset ( want to comeback to previous version)

ignore files:
$ cat .gitignore
*.a
doc/*.txt

#ignore all .a files
*.a

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

rename
git mv README.md README

git clone git@github.com:speechLabBcCuny/pyConcatResyn.git
Create Branch:
git checkout -b Autobi
Down branch Autobi from website to server
git pull origin Autobi
maybe need to
git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

We’ve mentioned and given some demonstrations of how the git clone command implicitly adds the origin remote for you. 
Here’s how to add a new remote explicitly. 
To add a new remote Git repository as a shortname you can reference easily, run git remote add <shortname> <url>:
you can run the git remote command.If you’ve cloned your repository,
you should at least see origin — that is the default name Git gives to the server you cloned from:

You can also specify -v, which shows you the URLs that Git has stored for the shortname
to be used when reading and writing to that remote:
git remote -v

git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)

Now you can use the string pb on the command line in lieu of the whole URL. 
For example, if you want to fetch all the information that Paul 
has but that you don’t yet have in your repository, you can run git fetch pb:
Paul’s master branch is now accessible locally as pb/master — 
you can merge it into one of your branches, or you can check out a local branch at that point if you want to inspect it.

If you clone a repository, the command automatically adds that remote repository under the name “origin”. 
So, git fetch origin fetches any new work that has been pushed to that server since you cloned 
(or last fetched from) it. It’s important to note that the git fetch command only downloads
the data to your local repository — it doesn’t automatically merge it with any of
your work or modify what you’re currently working on. 
You have to merge it manually into your work when you’re ready.

If your current branch is set up to track a remote branch (see the next section and Git Branching for more information), 
you can use the git pull command to automatically fetch and then merge that remote branch into your current branch.
This may be an easier or more comfortable workflow for you; and by default,
the git clone command automatically sets up your local master branch to track the remote master branch
(or whatever the default branch is called) on the server you cloned from. 
Running git pull generally fetches data from the server you originally cloned from and
automatically tries to merge it into the code you’re currently working on.


$ git branch testing
The git branch command only created a new branch — it didn’t switch to that branch.

To switch to an existing branch, you run the git checkout command. Let’s switch to the new testing branch:
$ git checkout testing

In local machine go to .ssh : cd ~/.ssh and 
cat id_rsa.pub
Copy the content of the file and add the public key to your github list of keys
With the public key
git clone git@github.com:speechLabBcCuny/bubbleAdversarialNetwork.git

warning: push.default is unset; its implicit value has changed in
Git 2.0 from 'matching' to 'simple'. To squelch this message
and maintain the traditional behavior, use:

  git config --global push.default matching

To squelch this message and adopt the new behavior now, use:

  git config --global push.default simple

When push.default is set to 'matching', git will push local branches
to the remote branches that already exist with the same name.

Since Git 2.0, Git defaults to the more conservative 'simple'
behavior, which only pushes the current branch to the corresponding
remote branch that 'git pull' uses to update the current branch.

See 'git help config' and search for 'push.default' for further information.
(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode
'current' instead of 'simple' if you sometimes use older versions of Git)

Everything up-to-date

1. Create a git from an old project
for Linux:
$ cd /home/user/my_project
for Mac:
$ git init

2. Add/Commit
File state:
- Tracked or untracked. 
- Tracked files can be unmodified, modified, or staged.
Need to track files, by "git add", so these files are "staged". 
Later, when we "git commit", only "staged" files are being commit. 
To track file
$ git add abc.py
To commit staged file
$ git commit
or with comment:
$ git commit -m "Add abcd....."
To combine "add" and "commit" step, when we add all changed files to "stage"
git commit -a -m 'Add abcd.....'
That’s because the -a flag includes all changed files

3. Rename file
git mv README.md README

4. Branch basic

git clone git@github.com:speechLabBcCuny/bubbleAdversarialNetwork.git
The remote repository will be download to local repository. 
The remote repository is called" Origin" and the local repository is called "Master"

git branch va_branch
git checkout va_branch

Do some work, then
git commit -a -m 'improve something'


If the remote repository change:
first update the local repository master. Change to the master repository
git checkout master
Then do 2 steps: fetch then merge:
git fetch origin
git merge origin

Or combine into 1 step: git pull
git pull command to automatically fetch and then merge that remote branch into your current branch

After that, switch to the branch repository, and then
git checkout va_branch
and then
git merge master

In order to push to remote repository
git push origin va_branch:branch_name_on_server
Check more at:
https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches
